{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/JS","result":{"pageContext":{"currentCategory":"JS","categories":["All","디자인패턴","알고리즘","JS","자료구조"],"edges":[{"node":{"id":"bfa04274-1a23-5dc2-88eb-2619c6ff2419","excerpt":"실행 컨텍스트, Excute Context 실행 컨텍스트는 JS 의 동작 원리를 담고 있는 핵심 개념으로, 독특한 JS의 특징들을(호이스팅, 스코프, 클로저 등) 설명할 때 기본이 되는 개념이다. 따라서 JS를 사용한다면 반드시 개념을 이해하고 있어야 된다. 실행 컨텍스트는 JS 의 모든 소스코드를 실행하고 관리하는 주체가 된다. 소스코드 ? 그렇다면 소스코드는 무엇일까? 소스코드는 컴퓨터 프로그램을 사람이 읽을 수 있는 프로그램이 언어로 기술한 텍스트 파일로 개발자가 작성하는 모든 코드를 일컫는다. 소스코드의 처리 과정 JS 엔진은 모든 코드를 평가 와 실행 이라는 2단계로 구분해 처리한다. 평가 과정에서는 실행 컨텍스트가 생성되고, 선언문을 실행해 생성된 식별자를 실행 컨텍스트가 관리하는 스코프에 등록하는 과정이다. 함수의 경우, 객체 환경 레코드(Object Environment Record)에 저장이 된다. const 로 선언한 변수의 경우, 선언적 환경 레코드(Declar…","fields":{"slug":"/js-실행컨텍스트/"},"frontmatter":{"categories":"JS","title":"실행 컨텍스트, Execute Context","date":"January 30, 2023"}},"next":{"fields":{"slug":"/ds-04-트리/"}},"previous":{"fields":{"slug":"/al-소수/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}