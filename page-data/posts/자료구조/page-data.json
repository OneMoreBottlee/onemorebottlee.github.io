{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/자료구조","result":{"pageContext":{"currentCategory":"자료구조","categories":["All","자료구조","CS","알고리즘","프로그래머스"],"edges":[{"node":{"id":"80844cdd-0172-58af-b642-5aa7ed76f603","excerpt":"연결 리스트 Linked List  배열 연결 리스트 장점 인덱스를 통한 빠른 접근 삽입과 삭제가 용이 단점 삽입과 삭제  중간 데이터 삭제시 공간 낭비 발생 임의 접근이 불가능해 느린 탐색 용도 빠른 접근이 요구되고, 데이터의 삽입과 삭제가 적을 때 삽입과 삭제 연산이 요구되고, 검색이 적을 때   단일 연결 리스트  단일 연결 리스트는 위의 그림처럼 한 방향으로 연결되어 있는 자료 구조이다.  연결 관계가 지속되는 것에 주의하면 데이터 추가와 삭제의 개념이 어렵지 않다. 추가 로직 \n 새로운 노드를 생성하고, 새 노드가 그 다음 노드를 가리키게 한다. 새 노드의 이전 노드가 새 노드를 가리키게 한다. 삭제 로직 \n\n 삭제할 타겟 노드를 찾는다. 타겟 노드의 이전 노드가 타겟 노드가 가리키던 노드를 가리키게 한다. 타겟 노드의 포인터가 아무것도 가리키지 않게 한다. 구현 구현한 단일 연결 리스트의 BigO는 다음과 같다. insertion - O(1) Removal - O(1) …","fields":{"slug":"/cs-자료구조-연결리스트/"},"frontmatter":{"categories":"자료구조 CS","title":"단일 연결 리스트","date":"January 13, 2023"}},"next":{"fields":{"slug":"/al-p-lv1햄버거만들기/"}},"previous":null}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}